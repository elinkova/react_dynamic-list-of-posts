{"version":3,"sources":["components/PostsList.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/NewCommentForm.tsx","components/PostDetails.tsx","components/UserSelector.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","onChoose","selectedPostId","className","map","post","id","title","type","onClick","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","json","client","Loader","NewCommentForm","postId","onUpdate","useState","name","setName","email","setEmail","text","setText","hasName","setHasName","hasEmail","setHasEmail","hasText","setHasText","isLoading","setIsLoading","handleSubmit","event","preventDefault","prev","comment","postComment","onSubmit","htmlFor","placeholder","classnames","value","onChange","target","PostDetails","comments","setComments","hasError","setHasError","isOpenForm","setIsOpenForm","isUpdates","setIsUpdates","loadComments","a","result","useEffect","length","href","filter","handleUpdate","UserSelector","users","selectedUserId","isClicked","setIsClicked","selectorTitle","setSelectorTitle","role","user","classNames","App","setUsers","setSelectedUserId","visiblePosts","setVisiblePosts","selectedPost","setSelectedPost","isSidebar","loadPosts","userId","handleChooseUser","handleChoosePost","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.50b45d16.chunk.js","sourcesContent":["import React from 'react';\nimport { Post } from '../types/Post';\n\ninterface Props {\n  posts: Post[];\n  onChoose: (post: Post) => void;\n  selectedPostId: number | undefined;\n}\n\nexport const PostsList: React.FC<Props> = ({\n  posts,\n  onChoose,\n  selectedPostId,\n}) => (\n  <div data-cy=\"PostsList\">\n    <p className=\"title\">Posts:</p>\n\n    <table className=\"table is-fullwidth is-striped is-hoverable is-narrow\">\n      <thead>\n        <tr className=\"has-background-link-light\">\n          <th>#</th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {posts.map(post => (\n          <tr\n            data-cy=\"Post\"\n            key={post.id}\n          >\n            <td data-cy=\"PostId\">{post.id}</td>\n\n            <td data-cy=\"PostTitle\">\n              {post.title}\n            </td>\n\n            <td className=\"has-text-right is-vcentered\">\n              {selectedPostId !== post.id\n                ? (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link is-light\"\n                    onClick={() => onChoose(post)}\n                  >\n                    Open\n                  </button>\n                )\n                : (\n                  <button\n                    type=\"button\"\n                    data-cy=\"PostButton\"\n                    className=\"button is-link\"\n                    onClick={() => onChoose(post)}\n                  >\n                    Close\n                  </button>\n                )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => response.json());\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { FormEvent, useState } from 'react';\nimport classnames from 'classnames';\nimport { client } from '../utils/fetchClient';\nimport { Comment } from '../types/Comment';\n\ninterface Props {\n  postId: number;\n  onUpdate: (response: Comment) => void;\n}\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, onUpdate }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [text, setText] = useState('');\n  const [hasName, setHasName] = useState(true);\n  const [hasEmail, setHasEmail] = useState(true);\n  const [hasText, setHasText] = useState(true);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const postComment = () => {\n    const comment = {\n      postId,\n      name,\n      email,\n      body: text,\n    };\n\n    setIsLoading(true);\n\n    return client.post('/comments', comment)\n      .then((response: any) => {\n        onUpdate(response);\n        setIsLoading(false);\n        setText('');\n      });\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!name) {\n      setHasName((prev) => !prev);\n    }\n\n    if (!email) {\n      setHasEmail((prev) => !prev);\n    }\n\n    if (!text) {\n      setHasText((prev) => !prev);\n    }\n\n    if (name && email && text) {\n      postComment();\n    }\n  };\n\n  const handleClear = () => {\n    setEmail('');\n    setName('');\n    setText('');\n    setHasEmail(true);\n    setHasName(true);\n    setHasText(true);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={(event) => {\n        handleSubmit(event);\n      }}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classnames('input', { 'is-danger': !hasName })}\n            value={name}\n            onChange={(event) => {\n              setName(event.target.value);\n              setHasName(true);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n\n          {!hasName && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!hasName && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classnames('input', { 'is-danger': !hasEmail })}\n            value={email}\n            onChange={(event) => {\n              setEmail(event.target.value);\n              setHasEmail(true);\n            }}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {!hasEmail && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n\n        {!hasEmail && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classnames('textarea', { 'is-danger': !hasText })}\n            value={text}\n            onChange={(event) => {\n              setText(event.target.value);\n              setHasText(true);\n            }}\n          />\n        </div>\n\n        {!hasText && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classnames(\n              'button',\n              'is-link',\n              { 'is-loading': isLoading },\n            )}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button\n            type=\"reset\"\n            className=\"button is-link is-light\"\n            onClick={handleClear}\n          >\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { Comment } from '../types/Comment';\nimport { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\n\ninterface Props {\n  post: Post;\n}\n\nexport const PostDetails: React.FC<Props> = ({ post }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n  const [isOpenForm, setIsOpenForm] = useState(false);\n  const [isUpdates, setIsUpdates] = useState(false);\n\n  const loadComments = async (id: number): Promise<any> => {\n    setIsLoading(true);\n    const result = await client.get(`/comments?postId=${id}`);\n\n    setIsLoading(false);\n\n    return result;\n  };\n\n  useEffect(() => {\n    loadComments(post.id)\n      .then(response => {\n        if ('error' in response) {\n          setHasError(true);\n        } else {\n          setComments(response);\n        }\n      });\n    setIsOpenForm(false);\n    setIsUpdates(false);\n  }, [post, isUpdates]);\n\n  const handleUpdate = (comment: Comment) => {\n    setComments((prev) => [...prev, comment]);\n  };\n\n  const handleRemove = (id: number) => {\n    setComments(comments.filter(comment => comment.id !== id));\n    client.delete(`/comments/${id}`);\n  };\n\n  return (\n    <div className=\"content\" data-cy=\"PostDetails\">\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${post.id}: ${post.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {post.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {(() => {\n            if (isLoading) {\n              return (<Loader />);\n            }\n\n            if (comments.length === 0) {\n              return (\n                <p\n                  className=\"title is-4\"\n                  data-cy=\"NoCommentsMessage\"\n                >\n                  No comments yet\n                </p>\n              );\n            }\n\n            return (\n              <>\n                <p className=\"title is-4\">\n                  Comments:\n                </p>\n\n                {comments.map(comment => (\n                  <article\n                    className=\"message is-small\"\n                    data-cy=\"Comment\"\n                    key={comment.id}\n                  >\n                    <div className=\"message-header\">\n                      <a\n                        href=\"mailto:misha@mate.academy\"\n                        data-cy=\"CommentAuthor\"\n                      >\n                        {comment.name}\n                      </a>\n                      <button\n                        data-cy=\"CommentDelete\"\n                        type=\"button\"\n                        className=\"delete is-small\"\n                        aria-label=\"delete\"\n                        onClick={() => handleRemove(comment.id)}\n                      >\n                        delete button\n                      </button>\n                    </div>\n\n                    <div className=\"message-body\" data-cy=\"CommentBody\">\n                      {comment.body}\n                    </div>\n                  </article>\n                ))}\n              </>\n            );\n          })()}\n\n          {hasError && (\n            <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n              Something went wrong\n            </div>\n          )}\n\n          {!isOpenForm && (\n            <button\n              data-cy=\"WriteCommentButton\"\n              type=\"button\"\n              className=\"button is-link\"\n              onClick={() => {\n                setIsOpenForm(true);\n              }}\n            >\n              Write a comment\n            </button>\n          )}\n        </div>\n\n        {isOpenForm && (\n          <NewCommentForm\n            postId={post.id}\n            onUpdate={(comment) => {\n              handleUpdate(comment);\n            }}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\n\ninterface Props {\n  users: User[];\n  onChoose: (userId: number) => void;\n  selectedUserId: number;\n}\n\nexport const UserSelector: React.FC<Props> = ({\n  users,\n  onChoose,\n  selectedUserId,\n}) => {\n  const [isClicked, setIsClicked] = useState(false);\n  const [selectorTitle, setSelectorTitle] = useState('Choose a user');\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className=\"dropdown is-active\"\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => {\n            setIsClicked(!isClicked);\n          }}\n        >\n          <span>\n            {selectorTitle}\n          </span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      {isClicked && (\n        <div className=\"dropdown-menu\" id=\"dropdown-menu\" role=\"menu\">\n          <div className=\"dropdown-content\">\n            {users.map(user => (\n              <a\n                href={`#user-${user.id}`}\n                key={user.id}\n                className={classNames(\n                  'dropdown-item',\n                  { 'is-active': selectedUserId === user.id },\n                )}\n                onClick={() => {\n                  onChoose(user.id);\n                  setIsClicked(false);\n                  setSelectorTitle(user.name);\n                }}\n              >\n                {user.name}\n              </a>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { UserSelector } from './components/UserSelector';\nimport { client } from './utils/fetchClient';\nimport { User } from './types/User';\nimport { Loader } from './components/Loader';\nimport { Post } from './types/Post';\n\nexport const App: React.FC = () => {\n  const [users, setUsers] = useState<User[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [visiblePosts, setVisiblePosts] = useState<Post[]>([]);\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n  const [hasError, setHasError] = useState(false);\n  const isSidebar = selectedPost && true;\n\n  const loadUsers = (url: string) : Promise<any> => {\n    return client.get(url);\n  };\n\n  const loadPosts = async (id: number) : Promise<any> => {\n    setIsLoading(true);\n    const posts = await client.get(`/posts?userId=${id}`);\n\n    setIsLoading(false);\n\n    return posts;\n  };\n\n  useEffect(() => {\n    loadUsers('/users')\n      .then(response => {\n        if ('error' in response) {\n          setHasError(true);\n        } else {\n          setUsers(response);\n        }\n      });\n  }, [users]);\n\n  const handleChooseUser = (userId: number) => {\n    loadPosts(userId)\n      .then(posts => {\n        if ('error' in posts) {\n          setHasError(true);\n        } else {\n          setVisiblePosts(posts);\n        }\n      });\n    setSelectedUserId(userId);\n    setSelectedPost(null);\n  };\n\n  const handleChoosePost = (post: Post) => {\n    if (selectedPost === post) {\n      setSelectedPost(null);\n    } else {\n      setSelectedPost(post);\n    }\n  };\n\n  return (\n    <main className=\"section\">\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  users={users}\n                  selectedUserId={selectedUserId}\n                  onChoose={(userId) => {\n                    handleChooseUser(userId);\n                  }}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {(() => {\n                  if (selectedUserId === 0) {\n                    return (\n                      <p data-cy=\"NoSelectedUser\">\n                        No user selected\n                      </p>\n                    );\n                  }\n\n                  if (isLoading) {\n                      return (<Loader />);\n                    }\n\n                  if (visiblePosts.length === 0) {\n                    return (\n                      <div\n                        className=\"notification is-warning\"\n                        data-cy=\"NoPostsYet\"\n                      >\n                        No posts yet\n                      </div>\n                    );\n                  }\n\n                  return (\n                    <PostsList\n                      posts={visiblePosts}\n                      onChoose={(post) => {\n                          handleChoosePost(post);\n                      }}\n                      selectedPostId={selectedPost?.id}\n                    />\n                  );\n                })()}\n\n                {hasError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': isSidebar },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  post={selectedPost}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}